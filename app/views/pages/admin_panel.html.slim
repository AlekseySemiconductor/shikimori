.reload

article
  .metric
    b Ruby:
    span #{RUBY_VERSION}

  .metric
    b Code:
    span #{@code[0..6]}

  .metric
    b Disk:
    span #{@disk_space}%

  .metric class="#{:alert if @mem_space.to_i > 80}"
    b Memory:
    span #{@mem_space}%

  .metric class="#{:alert if @swap_space.to_i > 10}"
    b Swap:
    span #{@swap_space}%

  .metric
    b Memcached:
    span #{@memcached_space}%

  / .metric class="#{:alert if @redis_keys.zero?}"
    / b Redis keys:
    / span = @redis_keys

  .metric class="#{:alert if @proxies_count < 200}"
    b Proxies:
    span = @proxies_count

  - if @last_episodes_message
    .metric class="#{:alert if @last_episodes_message < 1.day.ago}"
      b Last Episode:
      span = time_ago_in_words @last_episodes_message

  / - if @calendar_update
    / .metric class="#{:alert if @calendar_update < 1.day.ago}"
      / b Calendar Update:
      / span = time_ago_in_words @calendar_update

  .metric
    / class="#{:alert if @pending_anidb > 30}"
    b Anidb:
    span = @pending_anidb
  .metric
    b Animes:
    span = @animes_to_import
  .metric
    b Mangas:
    span = @mangas_to_import
  .metric
    b Characters:
    span = @characters_to_import
  .metric
    b People:
    span = @people_to_import

  / - if @calendar_unrecognized.present? && @calendar_unrecognized.any?
    / .subheadline Calendar Unrecognized
    / .m15
      / - @calendar_unrecognized.each do |name|
        / p.m5 = name
  / .subheadline links
  / .m15
    / p: a href="#{publishing_cosplay_galleries_url}" Cosplay Publishing

article
  - if @sidkiq_stats
    .metric
      b
        a href="/sidekiq/" Sidekiq

    / .metric
      / b processed
      / span #{@sidkiq_stats.processed}

    / .metric
      / b failed
      / span #{@sidkiq_stats.failed}

.sidekiq
  .metric
    - @sidkiq_busy&.each do |job|
      .job
        span.right
          = time_ago_in_words Time.at(job['enqueued_at'])
        span.busy
          = job['class']

    - @sidkiq_enqueued&.each do |job|
      .job
        span.right
          = time_ago_in_words Time.at(job['enqueued_at'])
        span.enqueued
          = job['class']

    - @sidkiq_retries&.each do |job|
      .job
        span.right
          = time_ago_in_words Time.at(job['enqueued_at'])
        span.retries
          = job['class']
