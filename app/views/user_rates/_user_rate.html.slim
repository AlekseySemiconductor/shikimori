.b-user_rate.unprocessed[
  data-status="#{user_rate.status if user_rate.persisted?}"
  data-target_id="#{user_rate.target_id}"
  data-target_type="#{user_rate.target_type}"
  data-button_only="#{!!local_assigns[:button_only]}"
  data-unauthorized="#{t '.please_sign_in', url: new_user_session_url}"
]
  .b-add_to_list[
    class="#{user_rate.persisted? ? user_rate.status : :planned}"
  ]
    = simple_form_for [:api, user_rate],
        remote: true,
        authenticity_token: true,
        html: { 'data-type' => :json } do |f|
      input type='hidden' name='frontend' value='1'

      = f.input :user_id, as: :hidden
      = f.input :target_id, as: :hidden
      = f.input :target_type, as: :hidden
      = f.input :status, as: :hidden

      .trigger
        .trigger-arrow
        - if user_rate.persisted?
          .edit-trigger[
            data-remote='true'
            data-type='html'
            data-action="#{edit_user_rate_url user_rate}"
          ]
            .edit
            .text
              span.status-name data-text="#{user_rate.status_name}"
              - if user_rate.score > 0
                span
                  | &nbsp;&nbsp;&ndash;&nbsp;&nbsp;
                  = user_rate.score
        - else
          .text.add-trigger[
            data-status="#{UserRate.statuses[:planned]}"
          ]
            .plus
            span.status-name data-text="#{t '.add_to_list'}"

      .expanded-options
        - UserRateDecorator.statuses_options(user_rate.target_type).each do |title,status|
          - if user_rate.new_record? || user_rate.status_name != title
            .option.add-trigger data-status="#{status}"
              .text
                span.status-name data-text="#{title}"

        - if user_rate.persisted?
          .option.remove-trigger[
            data-action="#{api_user_rate_url user_rate, frontend: 1}"
            data-method='delete'
            data-remote='true'
            data-type='json'
            value="#{t '.remove_from_my_list'}"
          ]
            .text
              span.status-name data-text="#{t '.remove_from_my_list'}"

  - if user_rate.persisted?
    .rate-edit
    .rate-show
      - if entry.respond_to? :episodes
        .rate-number
          span.current-episodes = user_rate.episodes
          - unless entry.episodes.zero?
            span.sep
              | /
            span.total-episodes
              = entry.episodes
          - if user_rate.episodes != entry.episodes || user_rate.episodes.zero?
            span.item-add.increment[
              data-action="#{increment_api_user_rate_url user_rate, frontend: 1}"
              data-method='post'
              data-remote='true'
              data-type='json'
            ]
        .episodes = UserRate.human_attribute_name :episodes

      - else
        .rate-number
          span.current-episodes = user_rate.chapters
          - unless entry.chapters.zero?
            span.sep
              | /
            span.total-episodes
              = entry.chapters
          - if user_rate.chapters != entry.chapters || user_rate.chapters.zero?
            span.item-add.increment[
              data-action="#{increment_api_user_rate_url user_rate, frontend: 1}"
              data-remote='true'
              data-type='json'
              data-method='post'
            ]
        .episodes = UserRate.human_attribute_name :chapters

      = simple_form_for [:api, user_rate],
          remote: true,
          authenticity_token: true,
          html: { 'data-type' => :json } do |f|
        input type='hidden' name='frontend' value='1'
        = f.input :score, as: :hidden
        = render partial: 'blocks/rate',
          locals: { score: user_rate ? user_rate.score : '', with_submit: true, input_selector: '#user_rate_score' }

      - if user_signed_in? && user_rate.text.present?
        p.note = user_rate.text_html
        .note-author
          = render 'users/user_16', user: current_user
