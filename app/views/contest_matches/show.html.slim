.contest-match[
  data-id="#{@resource.id}"
  data-state="#{@resource.state}"
  data-voted="#{@vote_status}"
]
  - cache @resource.cache_key do
    .prev-match
    .next-match
    .current-match
      - if @resource.right.nil? && @resource.left.nil?
        .vs.empty
          p.help = t '.candidates_not_selected'

      - elsif @resource.right && @resource.left
        .match-members
          .match-member [
            data-variant='left'
            data-type='json'
            data-method='post'
            data-action="#{votes_url votable_id: @resource.id, votable_type: ContestMatch.name, vote: 'yes'}"
          ]
            = render @resource.left, cover_notice: :studio, content_by: :none
          .vs
            div vs
            - if @resource.started?
              p.help = t '.click_candidate'
              p.help.success = t '.your_vote_counted'
              p.help.refrained = t '.you_have_abstained_from_voting'
              span.refrain [
                data-type='json'
                data-method='post'
                data-remote='true'
                data-action="#{votes_url votable_id: @resource.id, votable_type: ContestMatch.name, vote: 'abstain'}"
              ] = t '.abstain_from_voting'
              p.next = t '.to_the_next_pair'
              p.finish = t '.thank_you_for_participation'

            - elsif @resource.finished?
              p.help.success = t '.voting_finished'
              p.help.refrained = t '.voting_finished'
              .refrain

            - else
              p.help = t '.voting_has_not_begun_yet'

          .match-member [
            data-variant='right'
            data-type='json'
            data-method='post'
            data-action="#{votes_url votable_id: @resource.id, votable_type: ContestMatch.name, vote: 'no'}"
          ]
            = render @resource.right, cover_notice: :studio, content_by: :none

        - if @resource.round.number > 1 && (@resource.defeated_by(@resource.left, @resource.round) + @resource.defeated_by(@resource.right, @resource.round)).any?
          .match-losers.cc.to-process data-dynamic="cutted_covers"
            = render partial: 'contest_matches/losers',
              object: @resource.defeated_by(@resource.left, @resource.round.prior_round),
              locals: { position: 'left' }
            = render partial: 'contest_matches/losers',
              object: @resource.defeated_by(@resource.right, @resource.round.prior_round),
              locals: { position: 'right' }

        - if @resource.finished?
          .votes-percents
            .left-part title="#{@resource.left_votes} #{i18n_i 'vote', @resource.left_votes} #{t '.for'} «#{@resource.left.name}»"
              span #{@resource.left_percent}% (#{@resource.left_votes})
              .right-part[
                style="width: #{[[@resource.right_votes.to_f / ([@resource.left_votes + @resource.right_votes, 1].max) * 100 - 0.75, 4].max, 95].min}%"
                title="#{@resource.right_votes} #{i18n_i 'vote', @resource.right_votes} #{t '.for'} «#{@resource.right.name}»"
              ]

                span #{@resource.right_percent}% (#{@resource.right_votes})

      - else
        center
          .match-members
            .match-member.voted [
              data-variant='left'
            ]
              = render @resource.left, cover_notice: :studio, content_by: :none

          - if @resource.defeated_by(@resource.left, @resource.round).any?
            .match-losers.to-process data-dynamic="cutted_covers"
              = render 'contest_matches/losers',
                losers: @resource.defeated_by(@resource.left, @resource.round),
                position: 'center'
