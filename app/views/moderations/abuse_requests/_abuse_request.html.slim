.b-log_entry.b-abuse_request.to-process[
  data-dynamic='log_entry'
  data-url=moderations_abuse_request_url(abuse_request)
]
  span
    span.id-label #
    = abuse_request.id
  span.date
    = abuse_request.created_at.strftime('%d.%m.%Y')

  = render 'users/user_16', user: abuse_request.user

  - unless abuse_request.value
    span.remove
      = t '.remove'

  .marker[
    class="b-#{abuse_request.kind}_marker"
    data-text=t("markers.#{abuse_request.kind.sub 'review', 'summary'}")
  ]

  - if abuse_request.value
    span = t '.for'
  - else
    span = t '.from'

  = render 'users/user_16', user: abuse_request.comment.user

  - if abuse_request.reason.present?
    span = t '.for_reason'
    span.reason = abuse_request.reason

  span
    == Messages::MentionSource.call abuse_request.comment.commentable, abuse_request.comment.id
  span: a.b-link.comment-hash href=comment_url(abuse_request.comment) #

  - if abuse_request.pending?
    - if abuse_request.comment.created_at < 1.week.ago
      span.outdated = t '.old_comment'

    - if abuse_request.comment.commentable_type == Topic.name
      - if abuse_request.comment.commentable.linked_type == Club.name
        span.misc-comment = t '.club_comment'

      - if abuse_request.comment.commentable.forum_id == Forum::OFFTOPIC_ID
        span.misc-comment = t '.offtopic_comment'

    - if abuse_request.comment.commentable_type == User.name
      span.misc-comment = t '.profile_comment'

    - if user_signed_in? && current_user.forum_moderator?
      .spoiler.collapse: span.action.half-hidden style="display: none;" = t '.show'
      .collapsed.spoiler: span = t '.actions'
      .spoiler.target style="display: none;"
        .moderation
          - if abuse_request.punishable?
            a.warn[
              data-action=new_comment_abuse_request_ban_path(abuse_request.comment, abuse_request)
              data-method='get'
              data-type='html'
              data-remote='true'
            ] = t '.warn'
            - unless abuse_request.spoiler?
              a.ban[
                href=new_comment_abuse_request_ban_path(abuse_request.comment, abuse_request)
                data-method='get'
                data-type='html'
                data-remote='true'
              ] = t '.ban'
            a.deny[
              href=deny_moderations_abuse_request_path(abuse_request)
              data-method='post'
              data-remote='true'
            ] = t '.reject'
            .ban-form
          - else
            a.take[
              href=take_moderations_abuse_request_path(abuse_request)
              method='post'
              data-remote='true'
            ] = t '.accept'
            a.deny[
              href=deny_moderations_abuse_request_path(abuse_request)
              method='post'
              data-remote='true'
            ] = t '.reject'
        .ban-form
  - else
    span.resolution class=abuse_request.state
      = abuse_request.human_state_name
    = render 'users/user_16', user: abuse_request.approver
