.b-comment.shiki-object.not-tracked.to-process[
  class=(:tooltipped if params[:action] == 'tooltip')
  data-appear_type='comment'
  data-dynamic='comment'
  data-track_comment=JsExports::CommentsExport.instance.placeholder(comment)
  data-user_id=comment.user.try(:id)
  data-user_nickname=comment.user.try(:nickname)
  id=comment.id
  itemscope
  itemprop='comment'
  itemtype='http://schema.org/Comment'
]
  a name="comment-#{comment.id}"
  / класс нужен из-за проверки высоты
  .inner class=(:check_height if comment.persisted? && (comment.body.size > 500 || comment.body =~ /\[poster/ || comment.body =~ /\[ima?g/ || comment.body.count("\n") > 5))
    - if comment.persisted?
      span.item-mobile title=t('actions.actions')

      aside.markers
        - if comment.try :allowed_summary?
          .b-summary_marker[
            class=(:active if user_signed_in?)
            style=('display: none;' unless comment.summary?)
            title=t('actions.markers.summary.remove')
            data-text=t('markers.summary')
            data-confirm=t('actions.markers.summary.confirm_remove')
            data-action=summary_api_v2_abuse_requests_url(comment_id: comment.id)
            data-method='post'
            data-remote='true'
            data-type='json'
          ]
        .b-offtopic_marker[
          class=(:active if user_signed_in?)
          style=('display: none;' unless comment.offtopic?)
          title=t('actions.markers.offtopic.remove')
          data-text=t('markers.offtopic')
          data-confirm=t('actions.markers.offtopic.confirm_remove')
          data-action=offtopic_api_v2_abuse_requests_url(comment_id: comment.id)
          data-method='post'
          data-remote='true'
          data-type='json'
        ]
        - if comment.respond_to?(:broadcast?) && comment.broadcast?
          .b-broadcast_marker data-text=t('.broadcast')
        .b-new_marker[
          data-appear_url=api_appears_url
          data-text=t('markers.new')
        ]

      aside.moderation-ban
      = render 'comments/buttons', comment: comment

    / пользователя может не быть при предпросмотре описания какой-либо
    / другой сущности, кроме комментария
    - if comment.user
      header
        span.linkeable[
          data-href=(comment.respond_to?(:topic_url) ? comment.topic_url : profile_url(comment.user, subdomain: false))
        ]
          img[
            src=comment.user.avatar_url(48)
            srcset="#{comment.user.avatar_url 80} 2x"
            alt=comment.user.nickname
          ]
        .name-date
          a.name[
            href=(comment.respond_to?(:topic_url) ? comment.topic_url : profile_url(comment.user, subdomain: false))
            itemprop='creator'
            tabindex="-1"
          ]
            /- if comment.respond_to?(:topic_url)
            - if comment.kind_of? SolitaryCommentDecorator
              = comment.topic_name
            - else
              = comment.user.nickname

          - if comment.persisted?
            span.time
              time[
                itemprop='dateCreated'
                datetime=comment.created_at.iso8601
              ] = l comment.created_at, format: '%e %B %Y'
              span.hash data-url=comment_url(comment) #

    .body itemprop='text'
      = comment.html_body

    .b-appear_marker[
      class="appear-comment-#{comment.id}"
    ]
