.b-collection-filters[
  data-base_path="/#{menu.klass.name.downcase.pluralize}"
]
  - if defined? in_user_profile
    = render 'animes_collection/mylist', klass: menu.klass

  .block.hidden
    ul.b-block_list.achievement.anime-params

  .block.hidden
    ul.b-block_list.franchise.anime-params

  .block
    .subheadline.m5 = t 'dashboards.animes.recommended.title'

    .b-list style="margin-left: 5px"
      li: a.b-link[
        href=send(:"recommendations_favourites_#{menu.klass.name.downcase}_url")
      ] = t "dashboards.#{menu.klass.table_name}.recommended.favourite"

      - if menu.anime?
        li: a.b-link[
          href=RecommendationsController::TOPIC_URL
        ] = t 'dashboards.animes.recommended.by_community'

      - unless menu.ranobe?
        li: a.b-link[
          href=recommendations_url(klass: menu.klass.name.downcase)
        ] = t "dashboards.#{menu.klass.table_name}.recommended.personalized"

  - unless %w[user_rates userlist_comparer].include? params[:controller]
    = render 'spnsrs/ad', ad: Ad.new(:menu_240x400)

  .block
    .subheadline.m5 = menu.klass.human_attribute_name :status
    ul.b-block_list.statuses.anime-params
      - menu.statuses.each do |status|
        li class="status-#{status.text}"
          input type='checkbox' autocomplete='off'
          = status.catalog_title

  - if menu.kinds.any?
    .block
      .subheadline.m5 = menu.klass.human_attribute_name(:kind)
      ul.b-block_list.kinds.anime-params
        - menu.kinds.each do |kind|
          li class="kind-#{kind.text}"
            input type='checkbox' autocomplete='off'
            = kind.title

          - if kind.text == 'tv'
            - %w(13 24 48).each do |episodes_kind|
              li.sub class="kind-tv_#{episodes_kind}"
                input type='checkbox' autocomplete='off'
                  = t ".anime.kind.tv_#{episodes_kind}.name"
                  span.b-question.b-tooltipped.mobile.unprocessed[
                    title=t(".anime.kind.tv_#{episodes_kind}.tooltip")
                    data-direction='top'
                  ]

  - if show_social?
    .addthis_toolbox.addthis_default_style
      a.addthis_button_vk
      a.addthis_button_facebook
      a.addthis_button_twitter
      a.addthis_button_google_plusone_share
      a.addthis_button_mymailru
      a.addthis_button_odnoklassniki_ru
      a.addthis_button_compact

  - if menu.show_sorting?
    .block
      .subheadline.m5 = i18n_i 'Sorting'
      ul.b-block_list.orders.anime-params.subcontent
        li.order-by-ranked = t 'by.ranked'
        li.order-by-kind.hidden = t 'by.kind'
        li.order-by-popularity = t 'by.popularity'
        li.order-by-name = t 'by.name'
        li.order-by-aired_on = t 'by.aired_on'

        - if local_assigns[:in_user_profile]
          li.order-by-my style='display: none' = t 'by.score'
          li.order-by-rate_id = t 'by.date_added'
          li.order-by-rate_updated = t 'by.date_updated'
          - if menu.klass == Anime
            li.order-by-episodes style='display: none' = t 'by.episodes'
          - else
            li.order-by-chapters style='display: none' = t 'by.chapters'
            li.order-by-volumes style='display: none' = t 'by.volumes'
          li.order-by-status style='display: none' = t 'by.status'
        - else
          li.order-by-id = t 'by.id'

        / используется в userlist comparer
        - if defined?(custom_sorts) && !custom_sorts.empty?
          - custom_sorts.each do |name, title|
            li class="order-by-#{name}"
              = title

  - if user_signed_in? && !defined?(in_user_profile)
    = render 'animes_collection/mylist', klass: menu.klass

  .block.hidden
    .subheadline.m5 = i18n_i 'Studio'
    ul.b-block_list.studios.anime-params

  .block.hidden
    .subheadline.m5 = i18n_i 'Publisher'
    ul.b-block_list.publishers.anime-params

  .block
    .subheadline.m5 = i18n_i 'Season'
    ul.b-block_list.seasons.anime-params
      - menu.seasons.each do |season|
        li class="season-#{season.text}"
          input type='checkbox' autocomplete='off'
          = season.catalog_title

  - unless %w[user_rates userlist_comparer].include? params[:controller]
    .block.scores
      .subheadline.m5 = i18n_i 'Score'
      ul.b-block_list.scores.anime-params
        - [8, 7, 6].each do |score|
          li class="score-#{score}"
            input type='checkbox' autocomplete='off'
            | #{score}+

  - if menu.klass == Anime
    .block.durations
      .subheadline.m5 = i18n_i 'Episode'
      ul.b-block_list.durations.anime-params
        - Animes::Filters::ByDuration::DRY_TYPE.values.each do |value|
          li class="duration-#{value}"
            input type='checkbox' autocomplete='off'
            = t ".anime.duration.#{value}"

    .block.ratings
      .subheadline.m5 = i18n_i 'Rating'
      ul.b-block_list.ratings.anime-params
        - Anime.rating.options.each do |title, rating|
          - next if rating == 'none'
          - next if rating == 'rx' && !user_signed_in?
          li class="rating-#{rating}"
            input type='checkbox' autocomplete='off'
            = title
            span.b-question.b-tooltipped.mobile.unprocessed[
              title=t("enumerize.anime.rating.hint.#{rating}")
              data-direction='top'
            ]

  .block.genres
    .subheadline.m5 = i18n_i 'Genre', :other
    = text_spoiler t('.show_list') do
      ul.b-block_list.genres.anime-params.m10
        - menu.sorted_genres.each do |genre|
          - next if genre.censored? && !user_signed_in?
          li class="genre-#{genre.to_param} #{:m10 if genre.position && genre.position % 10 == 0}"
            input type='checkbox' autocomplete='off'
            = localization_span genre
            - if genre.description.present?
              span.b-question.mobile.bubbled[
                title=genre.description
                data-predelay='150'
                data-href=tooltip_moderations_genre_url(genre)
              ]
