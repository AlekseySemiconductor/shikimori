- if changes.any?
  .changes
    - if !defined?(no_header) || !no_header
      .subheadline.changes-title История правок
    - changes.each do |change|
      = cache change.cache_key(defined?(moderation), current_user) do
        .change
          span.id-label #
          span = change.id
          span.date
            = change.created_at.strftime('%d.%m.%Y')
          span
            = link_to user_url(change.user) do
              img.avatar src="#{gravatar_url change.user, 16}" alt="#{change.user.nickname}" title="#{change.user.nickname}"
            = link_to change.user.nickname, user_url(change.user), class: 'nickname', title: "#{change.user.nickname}"
          - if defined?(moderation)
            span.column
              = change.column
            span.id
              - if change.item
                = link_to change.item.name, url_for(change.item), class: 'bubbled', 'data-href' => url_for(change.item)+'/tooltip', 'data-remote' => true
              - else
                = t "Deleted.#{change.model}"
          - if change.screenshots?
            - if change.action == UserChange::ScreenshotsPosition
              span Порядок кадров
            - elsif change.action == UserChange::ScreenshotsUpload
              span #{change.value.include?(',') ? 'Новые кадры' : 'Новый кадр'}
            - else
              span #{change.value.include?(',') ? 'Удаление кадров' : 'Удаление кадра'}
          - if change.video?
            - if change.action == UserChange::VideoUpload
              span Новое видео
            - elsif change.action == UserChange::VideoDeletion
              span Удаление видео
          span.status style="color: #{user_change_status_color change.status}"
            = t "UserChangeStatus.#{change.status}"

          - if change.approver.present?
            span
              = change.approver.nickname

          .spoiler.collapse
            span.action.half-hidden style="display: none;" развернуть
          .collapsed.spoiler изменения

          .spoiler.target style="display: none;"
            - if defined?(moderation)
              .moderation
                - if change[:locked]
                  p сначала предыдущие правки
                - elsif change.pending?
                  - if change.column == 'torrents_name' && user_signed_in? && !current_user.admin?
                    p эту правку посмотрит morr
                  - elsif user_signed_in? && current_user.user_changes_moderator?
                    - unless ['tags', 'russian', 'screenshots', 'torrents_name' ,'video'].include? change.column
                      = link_to 'принять', moderation_aplly_user_change_path(change), class: 'default-link', title: 'Применить правку'
                    = link_to 'взять', moderation_take_user_change_path(change), class: 'default-link', title: 'Применить правку, но НЕ учтывать пользователя среди авторов'
                    = link_to 'отказать', moderation_deny_user_change_path(change), class: 'default-link', title: 'Отменить правку и послать пользователю уведомление об этом'
                  - if user_signed_in? && (current_user.user_changes_moderator? || current_user.id == change.user_id)
                    = link_to 'удалить', moderation_delete_user_change_path(change), class: 'default-link', title: 'Отменить правку и не посылать пользователю уведомление об этом'

            - if change.screenshots?
              - if change.action == UserChange::ScreenshotsPosition
                .screenshots-compare
                  .after
                    p Стало
                    - change.positioned_screenshots.each do |image|
                      img src="#{image.image.url :preview, false}"
                  .before
                    p Было
                    / для не принятых правок берём текущие скриншоты, а при просмотре истории отображаем запомненные
                    - (change.pending? ? change.current_screenshots : change.positioned_screenshots(change.prior)).each do |image|
                      img src="#{image.image.url :preview, false}"
              - else
                .screenshots
                  .images-list
                    = render partial: 'images/image', collection: change.attached_screenshots, locals: { group_name: "attached_screenshots_#{change.id}", style: :original }, formats: :html
                .clearfix
            - elsif change.video?
              blockquote
                .quoteable
                  = change.attached_video.kind
                  span.name
                    = change.attached_video.name
                == BbCodeService.instance.format_comment change.attached_video.url
            - else
              .comment-block
                - if change.prior || change.pending?
                  blockquote
                    .quoteable Было
                    p
                      = change.prior || change.current_prior
                blockquote
                  .quoteable
                    - if change.prior || change.pending?
                      | Стало
                    - else
                      | Изменение
                  p
                    = change.value
                - if change.prior || change.pending?
                  blockquote
                    .quoteable Изменения
                    p
                      = sanitize change.get_diff
                - if change.source.present?
                  p.source
                    b Источник:&nbsp;
                    a href="#{change.source}"
                      = h(change.source).sub(/^https?:\/\//, '')

            span class="closing"
