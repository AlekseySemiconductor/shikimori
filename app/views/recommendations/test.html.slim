header.head
  h1 Тест системы рекомендаций
  p.notice Здесь расположены тестовые выборки по различным вариантам подбора рекомендаций

/img.m5 src="https://api.monosnap.com/image/download?id=ybg90kD4G9PZd0hWskxkzOslm"

/.subheadline.orange Экспериментально повышающие точность предсказания методы
/.subcontent
  /p Выкидываем все оценки равные нулю (40-50% к точности)
  /p Выкидываем оценки от спешиалов (0.01-0.02 к точности)
  /p Приравнением к 5 все оценки ниже 5 (0.1 к точности)

- @users.each do |user|
  h3.subheadline.m5 class="#{'blue' if user.id == -1}"
    - if user.id != -1
      - rates = Recommendations::RatesFetcher.new(Anime, [user.id]).fetch(Recommendations::Normalizations::None.new)[user.id].values
      | #{user.nickname}&nbsp;&nbsp;&nbsp;
      span style="font-weight: normal; font-size: 14px" mean #{Recommendations::Normalizations::NormalizationBase.new.mean(rates, user.id).round 2}, sigma #{Recommendations::Normalizations::NormalizationBase.new.sigma(rates, user.id).round 2}
    - else
      = user.nickname

  .subcontent
    table.b-table
      tr
        th style="width: 450px; text-align: left;" Метрика
        /th style="width: 190px; text-align: left;" RMSE normalized
        th style="width: 50px; text-align: left;" RMSE
      tr.border
        th colspan="2"

      - @metrics.each do |metric, results|
        tr
          td.name #{metric}#{" (лучшее / среднее / медианное / худшее)" if user.id == -1}
          /td.num style="white-space: nowrap; text-align: left;"
            - if user.id == -1
                == "%.2f / %.2f / <b>%.2f</b> / %.2f" % [results.values.map(&:first).min, results.values.map(&:first).sum / results.keys.size, results.values.map(&:first).sort[results.size/2], results.values.map(&:first).max]
            - else
              = "%.2f" % results[user.id].first
          td.num style="white-space: nowrap; text-align: left;"
            - if user.id == -1
                == "%.2f / %.2f / <b>%.2f</b> / %.2f" % [results.values.map(&:second).min, results.values.map(&:second).sum / results.keys.size, results.values.map(&:second).sort[results.size/2], results.values.map(&:second).max]
            - else
              = "%.2f" % results[user.id].second
  br
  br
