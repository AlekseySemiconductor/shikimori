.b-entry-info
  .line.level
    .key #{t '.levels'}:&nbsp;
    .value = achievements.size

  .line
    .key #{t '.source'}:&nbsp;
    .value
      a.b-link[
        href=achievements.first.rule[:source]
      ] = achievements.first.rule[:source].gsub %r{\A.*/}, ''
      a.b-question href="#{how_to_edit_achievements_pages_url}"

  - unless local_assigns[:animes] && achievements.first.rule.dig(:filters, 'anime_ids')
    .line
      .key #{t '.animes'}:&nbsp;
      .value == achievements.first.animes_count || '&ndash;'

  .line
    .key #{t '.threshold'}:&nbsp;
    .value = achievements.map { |v| v.rule[:threshold] }.join(', ')

  .line.m10
    .key = t '.rules'
    .value.filters
      = BbCodes::Text.call "[code=json]#{JSON.pretty_generate(achievements.first.rule[:filters]).gsub(/\[.*\]/mix) {|match| match.gsub(/\n|\ /, '') }}[/code]"

  - if local_assigns[:animes] && achievements.first.rule.dig(:filters, 'anime_ids')
    .line
      .key #{t '.animes'}:&nbsp;
      .value == achievements.first.animes_count || '&ndash;'

    = spoiler t('.show_anime_list') do
      - scope = Anime.where(id: achievements.first.rule[:filters]['anime_ids']).order(score: :desc)
      - cache scope.cache_key do
        .hide-expanded = t '.hide'
        .cc-8
          = render partial: 'animes/anime',
            collection: scope.decorate,
            locals: { cover_notice: :year_kind },
            cache: ->(entry, _) { CacheHelper.keys entry, :year_kind }
