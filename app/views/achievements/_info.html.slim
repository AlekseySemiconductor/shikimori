- is_show_animes = local_assigns[:animes] && ((achievements.first.animes_count && achievements.first.animes_count < 500) || achievements.first.rule.dig(:filters, 'anime_ids') || achievements.first.rule.dig(:filters, 'franchise') || params[:animes])

.b-entry-info
  - unless achievements.first.franchise?
    .line.level
      .key #{t '.levels'}:&nbsp;
      .value = achievements.size

    .line
      .key #{t '.source'}:&nbsp;
      .value
        a.b-link[
          href=achievements.first.rule[:source]
        ] = achievements.first.rule[:source].gsub %r{\A.*/}, ''
        a.b-question href=how_to_edit_achievements_pages_url

  .line
    .key #{t '.animes'}:&nbsp;
    .value == achievements.first.animes_count || '&ndash;'

  .line
    .key #{t '.threshold'}:&nbsp;
    .value.thresholds
      - if achievements.first.animes_count&.positive?
        - if achievements.first.rule[:threshold].is_a?(String) && achievements.first.rule[:threshold].match?(/^\d+%$/)
          - achievements.each do |achievement|
            span = "#{achievement.rule[:threshold]} (#{(achievements.first.animes_count / 100.0 * achievement.rule[:threshold].to_i).round})"
        - else
          - achievements.each do |achievement|
            span = "#{(achievement.rule[:threshold] * 100.0 / achievements.first.animes_count).round(2)}% (#{achievement.rule[:threshold]})"
      - else
        - achievements.each do |achievement|
          span = achievement.rule[:threshold]

  .line.m10
    .key = t '.rules'
    .value.filters
      = BbCodes::Text.call "[code=json]#{JSON.pretty_generate(achievements.first.rule[:filters]).gsub(/\[.*\]/mix) {|match| match.gsub(/\n|\ /, '') }}[/code]"

  - if is_show_animes
    = spoiler t('.show_anime_list') do
      - cache achievements.first.animes_scope.cache_key do
        .hide-expanded = t '.hide'
        .cc-8
          = render partial: 'animes/anime',
            collection: achievements.first.animes_scope.decorate,
            locals: { cover_notice: :year_kind },
            cache: ->(entry, _) { CacheHelper.keys entry, :year_kind }
