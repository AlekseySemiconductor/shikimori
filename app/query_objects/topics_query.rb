class TopicsQuery < QueryObjectBase
  pattr_initialize :section, :user, :linked

private

  def query
    query = @section ? by_section(prepare_query) : prepare_query
    exclude_hentai exclude_generated by_linked query
  end

  def prepare_query
    Entry
      .with_viewed(@user)
      .includes(:section, :user)
      .order_default
  end

  def by_section query
    case @section.permalink
      when Section::static[:all].permalink
        if @user
          query.where "type != ? or (type = ? and #{Entry.table_name}.id in (?))", GroupComment.name, GroupComment.name, user_subscription_ids
        else
          query.where.not type: GroupComment.name
        end

      when 'reviews'
        query
          .where(section_id: @section.id)
          .except(:order)
          .order(created_at: :desc)

      when Section::static[:news].permalink
        query.where type: [AnimeNews.name, MangaNews.name]

      else
        query.where section_id: @section.id
    end
  end

  def by_linked query
    if @linked
      query.where linked_id: @linked.id, linked_type: @linked.class.name
    else
      query
    end
  end

  def exclude_generated query
    query.send @section && @section.permalink == 'news' ? :wo_episodes : :wo_empty_generated
  end

  def exclude_hentai query
    query
      .joins("left join animes on animes.id=linked_id and linked_type='Anime'")
      .where("animes.id is null or animes.censored=false")
  end

  def user_subscription_ids
    Subscription
      .where(user_id: @user.id, target_type: Entry::Types)
      .pluck(:target_id)
  end
end
