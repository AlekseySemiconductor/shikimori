---
http_interactions:
- request:
    method: get
    uri: https://vimeo.com/85212054
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/39.0.2171.71 Safari/537.36
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Wed, 30 May 2018 03:38:29 GMT
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '1'
      X-Vserver:
      - dfvimeowebproxy4
      Content-Length:
      - '26297'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 30 May 2018 01:51:11 GMT
      Age:
      - '0'
      Connection:
      - keep-alive
      X-Served-By:
      - cache-iad2128-IAD, cache-lcy19239-LCY
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1527645071.434426,VS0,VE97
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 30 May 2018 01:51:09 GMT
recorded_with: VCR 4.0.0
