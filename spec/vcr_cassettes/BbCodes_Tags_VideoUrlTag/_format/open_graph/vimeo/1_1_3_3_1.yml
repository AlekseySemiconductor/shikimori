---
http_interactions:
- request:
    method: get
    uri: https://vimeo.com/85212054
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/39.0.2171.71 Safari/537.36
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Wed, 29 Aug 2018 18:38:45 GMT
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-4
      X-Vimeo-Dc:
      - ge
      Content-Length:
      - '26462'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 29 Aug 2018 16:38:45 GMT
      Age:
      - '0'
      Connection:
      - keep-alive
      X-Served-By:
      - cache-iad2133-IAD, cache-lcy19241-LCY
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1535560725.268878,VS0,VE225
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 29 Aug 2018 16:38:36 GMT
recorded_with: VCR 4.0.0
